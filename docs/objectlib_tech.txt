Object Library - Technical Documentation
========================================

Base Data Strucure
------------------

ARRAYS

All data is stored in ADT arrays.

The arrays are initialized with a predefined size depending on data structure.
Objects only need 3 elements with one cell per element.

    new Object:object = Object:CreateArray(_, OBJECT_DATA_LEN);

Hard coding array indexes for these structures is a bad idea, so we made enum
structures to give each array element a name.

    enum ObjectData
    {
        Object_Data = 0
        Object_NullKey,
        Object_MetaData
    }

When we modify data in an object we use SetArrayCell to directly modify an
element in the array. An enum value is used as index. Mainly we use accessor
functions to simplify operations working directly on the arrays. It also hides
a lot of tag casting.

    stock Handle:ObjLib_GetObjectData(Object:object)
    {
        return Handle:GetArrayCell(Handle:object, _:Object_Data);
    }

This is the basic data structure in the Object Library. References to objects
and other structures are actually ADT array handles. We made separate tags for
them so it's easier to destinguish them, and the compiler will be able to do tag
checking.

    enum Object
    {
        INVALID_OBJECT = 0
    }
    
    enum ObjectType
    {
        INVALID_OBJECT_TYPE = 0
    }
    
    enum Collection
    {
        INVALID_COLLECTION = 0
    }

Even though objects have some sort of type safety, they are not protected from
being edited direclty. There's nothing preventing the user from modifying
elements in the object array directly, though it's highly recommended to use
appropriate functions in this library.


Objects
-------

Objects are made as simple as possible. An object only need to store 3 values:

    * Handle to data array.
    * Handle to null flag array.
    * Handle to type descriptor array.

The data array is also an ADT array. It stored the raw object data, with one
element for each key. It may store numbers, strings and arrays.

The null flag array stores which keys that have values and not. Keys with the
null flag set may store garbage or old values. The null flags are checked before
reading values and it will throw an error if a key is null.

The type descriptor stores all meta data about the object. It also defines which
type the object is. Details is explained below.


NOTE

The size reserved for each element is constant (defined in the type descriptor),
so some space may be wasted if one key is a long string and the rest is just
numbers.

This might be optimized in the future with a separate data array for arrays and
strings, but it will break consistency of key indexes. Two keys may get the same
index, even though the index itself will be valid for the key it belongs to. Due
to this it's recommended to always access key by name. It's using a Trie for
name lookup and is still very fast. Iterating over keys might be tricky.


Type Descriptors
----------------

To avoid redundancy, meta data about object are stored in a separate type
descriptor structure. This makes it possible for objects of the same type to
share meta data.

A type descriptor use several data structures to store the following:

    * Handle to array with key names.
    * Handle to array with key data types.
    * Key size.
    * Block size.
    * Handle to array with constraints.
    * Error handle callback.
    * Whether the type is locked.
    * Reference to parent object.

Obviously it needs to store a list of key names for the object. It also stores
another array with data types of each key, at the matching index.

When creating a type, the user (developer) specifies a key size and a block
size. These sizes decides how much space that's reserved for key names and
values. Both specify number of cells to reserve. When working with strings, the
user may use ByteCountToCells to calulate how many cells that are required for
storing a string.

The constraint array stores references to constraint objects for each key.
Constraints are optional so, some keys may be INVALID_OBJECT.

The user may create a custom error callback function to handle various errors
catched in the error handler. If no error callback is specified the error
handler will throw an error instead ("crash early" philosophy). See the Error
Handler chapter for details about error handling.

The two last entries listed is about mutable and immutable objects. See the
Mutable and Immutable Objects chapter below.


Mutable and Immutable Objects
-----------------------------

There are two types of objects: mutable and immutable. The difference is whether
the user can add keys to an object after it's created.

These object types has to be separate. If a key is added to a type descriptor,
the object must be updated with a new value entry in the raw data array and the
null key array.

This specific case is not an issue, but if a type descriptor is used by multiple
objects, all those objects must be updated too. This adds complexity and we
decided to keep it simple: once a type is used by an object, it's locked for
further modification.

We made one exception. You can create mutable objects, but each one has their
own type descriptor. It can be created based on an existing type descriptor, but
it will be cloned and attached to the object.

The parent object reference in the type descriptor tells whether it belongs to
a mutable object. If a parent object is specified, it will update that object
when keys are added or removed.


Memory Management
-----------------

The Object Library doesn't have a garbage collector, so the user is responsible
for deleding unused objects. The user can't just use CloseHandle on an object,
even though it will work. The object array itself store other handles that must
be closed.

Delete functions are provided to do a proper cleanup of objects and other data
structures.

If there's a leak, it will most likely leak pretty fast unless the plugin only
creates a few objects once.


Error Handler
-------------




* globals
* constraints
* constraint handler
* collections
* keyvalue parser
* inspector
