Object Library - Technical Documentation
========================================

Base Data Strucure
------------------

All data is stored in ADT arrays.

The arrays are initialized with a predefined size depending on data structure.
Objects only need three elements with one cell per element.

    new Object:object = Object:CreateArray(_, OBJECT_DATA_LEN);

Hard coding array indexes for these structures is a bad idea, so we made enum
structures to give each array element a name.

    enum ObjectData
    {
        Object_Data = 0
        Object_NullKey,
        Object_MetaData
    }

When we modify data in an object we use SetArrayCell to directly modify an
element in the array. An enum value is used as index. Mainly we use accessor
functions to simplify operations working directly on the arrays. It also hides
a lot of tag casting.

    stock Handle:ObjLib_GetObjectData(Object:object)
    {
        return Handle:GetArrayCell(Handle:object, _:Object_Data);
    }

This is the basic data structure in the Object Library. References to objects
and other structures are actually ADT array handles. We made separate tags for
them so it's easier to destinguish them, and the compiler will be able to do tag
checking.

    enum Object
    {
        INVALID_OBJECT = 0
    }
    
    enum ObjectType
    {
        INVALID_OBJECT_TYPE = 0
    }
    
    enum Collection
    {
        INVALID_COLLECTION = 0
    }

Even though objects have some sort of type safety, they are not protected from
being edited direclty. There's nothing preventing the user from modifying
elements in the object array directly, though it's highly recommended to use
appropriate functions in this library.


Objects
-------

Objects are made as simple as possible. An object only need to store three
values:

    * Handle to data array
    * Handle to null flag array
    * Handle to type descriptor array

The data array is also an ADT array. It stores the raw object data, with one
element for each key. It may store numbers, strings and arrays.

The null flag array stores which keys that have values and not. Keys with the
null flag set may store garbage or old values. The null flags are checked before
reading values and it will throw an error if a key is null.

The type descriptor stores all meta data about the object. It also defines which
type the object is. Details is explained below.


NOTE

The size reserved for each element is constant (defined in the type descriptor),
so some space may be wasted if one key is a long string and the rest is just
numbers.

This might be optimized in the future with a separate data array for arrays and
strings, but it will break consistency of key indexes. Two keys may get the same
index, even though the index itself will be valid for the key it belongs to. Due
to this it's recommended to always access key by name. It's using a Trie for
name lookup and is still very fast. Iterating over keys would be tricky.


Type Descriptors
----------------

Meta data about objects are stored in a separate type descriptor structure. This
also makes it possible for objects of the same type to share meta data.

A type descriptor use several data structures to store the following:

    * Handle to array with key names
    * Handle to array with key data types
    * Key size
    * Block size
    * Handle to array with constraints
    * Error handler callback
    * Whether the type is locked
    * Reference to parent object

Obviously it needs to store a list of key names for the object. It also stores
another array with data types of each key, at the matching index.

When creating a type, the user (developer) specifies a key size and a block
size. These sizes decides how much space that's reserved for key names and
values. Both specify number of cells to reserve. When working with strings, the
user may use ByteCountToCells to calulate how many cells that are required for
storing a string.

The constraint array stores references to constraint objects for each key.
Constraints are optional, so some elements may be set to INVALID_OBJECT.

The user may create a custom error callback function to handle various errors
catched in the error handler. If no error callback is specified the error
handler will throw an error instead ("crash early" philosophy). See the Error
Handler chapter for details about error handling.

The two last entries listed is about mutable and immutable objects. See the
Mutable and Immutable Objects chapter below.


Mutable and Immutable Objects
-----------------------------

There are two types of objects: mutable and immutable. The difference is whether
the user can add keys to an object after it's created.

These object types has to be separate. If a key is added to a type descriptor,
the object must be updated with a new value entry in the raw data array and the
null key array.

This specific case is not an issue, but if a type descriptor is used by multiple
objects, all those objects must be updated too. This adds complexity and we
decided to keep it simple: once a type is used by an object, it's locked for
further modification.

We made one exception. You can create mutable objects, but each one has their
own type descriptor. It can be created based on an existing type descriptor, but
it will be cloned and attached to the object.

The parent object reference in the type descriptor tells whether it belongs to
a mutable object. If a parent object is specified, it will update that object
when keys are added or removed.


Memory Management
-----------------

The Object Library doesn't have a garbage collector, so the user is responsible
for deleting unused objects. The user can't just use CloseHandle on an object,
even though it will work. The object array itself stores other handles that must
be closed.

Delete functions are provided to do proper cleanup of objects and other data
structures. It will only do cleanup for the object itself, not the data stored
by users. The user will be responsible for closing its own handles, as usual.

If there's a leak, it will most likely leak pretty fast unless the plugin only
creates a few objects once.

In some rare cases SourceMod might give a false memory leak warning. The Object
Library use a lot of handles, but this is only an issue if you create _a lot_ of
objects. Especially mutable objects creates a lof of handles because of the
individual type descriptors (which are much more expensive than objects).


Error Handler
-------------

Error handling is provided through an error internal handler. If something goes
wrong, the Object Library will trigger an error using the error handler.

The error handler will either result in a call to ThrowError, or a user defined
error callback if it exists. It takes various prameters to gather information,
along with a formatted message.

An error callback can be specified in type descriptors, so you can have various
callbacks for different types.

The error callback can also be overridden in various situations. Currently this
is in accessor functions and the KeyValue parser (the parser has its own error
handler).


Constraints
-----------

Constraints are regular objects with parameters that specify constraints of
various types. Constraint types are identified by their type descriptors.

Constraint type descriptors are built once and remain in memory until the plugin
is unloaded.

Helper functions are provided to build a constraint object.


Lookup Constraints
------------------

Lookup constraint objects store a table of lookup strings and replacement
values. It supports ADT Array, ADT Trie and a callback for user defined
replacement.

The array method use two arrays where the first one store lookup strings and the
second one store replacement values. When the handler is called it gets the
replacement by searching the lookup array to get an index. The replacement value
at the specified index is copied and stored.

The trie method is similar, but now lookup strings are directly mapped to
replacement values. It's useful if there are many lookup strings and is faster
than searching through a large array.

The callback method calls a user defined callback where the user can process the
lookup value and return a replacement value. It supports three types of
callback signatures; cell, array and string.


Constraint Handler
------------------

The constraint handler is divided into several main functions:

    1. ObjLib_ApplyConstraints
    2. ObjLib_RunConstraintHandler
    3. ObjLib_ApplyValue, ObjLib_ApplyString, ObjLib_ApplyArray

The entry point of the constraint handler is ObjLib_ApplyConstraints. This
function is called by accessor functions when they're about to store a value.
Instead of storing the value, they delegate this work to the constraint handler.
The constraint handler works like a value filter.

Constraint handlers return whether the value is invalid, valid or overridden.
ObjLib_ApplyConstraints reads this return value and acts accordingly. 

Constraint errors are handled in individual constraint handlers so they are able
to give specific error messages.

If the value was overridden it does nothing, because something else stored the
value.

If the value is valid it delegates the work to an appropriate storage function
depending on value type. This propagates down to low-level set-functions for the
appropriate type (object or collection at the moment).

The individual constraint handlers simply do tests on the value and throw errors
on constraint violations.


Collections
-----------

Collections are regular objects and is a wrapper around an ADT array. There's
nothing special about these. They are typed and support constraints like regular
object keys.

A collection object stores the following:

    * Data type
    * Handle to array of collection elements
    * Reference to constraint object

The data type specifies the data type of _all_ elements in the collection.

The collection elements are stored in a regular ADT array.

An optional constraint object reference may be provided. If none is used, it
only validates data type.

It's a little bit slower than ADT arrays due to the retrieval of the element
array handle and validation, but this is marginal.


KeyValue Parser
---------------

The KeyValue parser is recursive and event based. It will traverse every key and
sub section in a KeyValue tree, and delegate work to appropriate event handlers.

The objects are automatically built according to a predefined type tree or a
type template.

To keep track of current state of multiple parsers in the plugin, the parsers
use a context object with user preferences and internal state values:

    * rootType
      The type hierarchy to validate against. This may be a nested structure of
      type descriptors defining the expected tree structure. If no root type is
      specified, validation is skipped and all objects are mutable.
      
    * ignoreEmptySections
      Whether to skip empty sections.
      
    * continueOnError
      Whether to continue parsing other keys on errors. This may be useful if
      the error is trivial, or when parsing a collection of optional objects.
      It will either skip a single key or a whole section depending on what's
      failing validation.
      
    * errorHandler
      User defined error handler to use on validation errors. It's optional and
      an internal fallback error handler may be used, though the error messages
      will be generic. The fallback error handler can be disabled by commenting
      OBJLIB_KV_SOFT_ERROR in kvparser.inc. This will result in a call to
      ThrowError instead, with a useful call stack that would otherwise be
      hidden.
      
    * name
      User defined name of parser context. A plugin may use various parsers and
      this name may be used to identify which part of the plugin that had
      validation errors.
      
    * parseState
      Tells parser what to do on every iteration (next key or section). It may
      be instructed to skip a section or abort parsing. See ObjLibParseState
      enumeration in kvparser.inc for details.
      
    * objectStack
      Object (section) cursor stack. Keeps track of parent objects and the
      current location in the KeyValue tree.
      
    * typeStack
      Type descriptor stack. Matches the object stack and stores references to
      type descriptors that were used to create the objects. This stack is used
      to access meta data and validate keys in the KeyVaue tree.
      
    * nameStack
      Stack of section names. Used to build a path to the current location on
      errors.

There are multiple layers of event handlers. The top level determines what to do
when traversing the tree, and maintain the stacks. Other work is delegated to
lower level handlers.

Top level handlers are:

    * OnSectionStart
      Determines type of the current section and gets an object for it. The task
      of creating the object is delegated to a lower level event handler
      depending on what type of object it is. Currently it's only collections
      and generic objects. The new object is pushed to the object stack.
      
    * OnSectionEnd
      Adds the new object to the parent object. It may be a collection or a
      generic object. It figures out which one and delegates it to the
      appropriate handler.
      
    * OnEmptySection
      Handles empty section. This just calls OnSectionStart and OnSectionEnd if
      empty sections are enabled in the context object.
      
    * OnKeyValue
      Stores a value in the current object. It's delegated to appropriate
      handler according to current object type.

Lower level handlers:

    * OnObjectStart
      Prepares a new object for the current section.
      
    * OnObjectEnd
      Stores the object in the parent object. Adds a key for it in the parent
      object if the parent is mutable.
      
    * OnCollectionStart
      Prepares a new collection for the current section.
      
    * OnCollectionObjectElement
      Just adds an object to the collection.
      
    * StoreObjectValue
      Adds a value to the current object using appropriate accessor functions
      according to the value data type. This implies validation.
      
    * StoreCollectionValue
      Stores a value in the current collection using appropriate accessor
      functions according to the collection element data type. Implies
      validation.


Object Inspector Tool
---------------------
* Functions for printing formatted object data to console or chat.
