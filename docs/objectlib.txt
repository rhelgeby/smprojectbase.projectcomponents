Object Library
==============

MAIN FEATURES
-------------

* Key/value object storage manager
  Create objects with dynamic content. Data is internally stored in ADT Arrays.

  Object data can be accessed through get/set functions (which implies
  validation).

* Mutable or immutable objects
  Objects can be either mutable or immutable. Immutable objects can't modify
  their type (add/remove keys) when created, but data in existing keys can be
  modified.

  Both use a type descriptor as a template. Mutable objects store a bundled
  descriptor so they can be modified independently, while immutable objects
  store a reference to a shared read-only type descriptor to save memory.

* Supports built-in and custom data validation
  The library supports basic validation constraints such as min/max limits in
  addition to a callback where the user can do custom validation of the object.

* Type safe (as far as it's possible in SourcePawn)
  Each key is assigned a type. This structure requires you to use appropriate
  get/set functions where the library will check if you use the correct
  function at runtime - and the compiler will be able to do tag checks.

* Import (and validate) data from Valve's KeyValue file format
  Creates objects based on the contents of a KeyValue file, and a user defined
  object type descriptor with optional validation constraints.

* Reflection
  Objects or types can be inspected at run time. Loop through keys, get data
  types or validation constraints.


WHY USE THIS
------------

This is an alternative to enumerated arrays. If you use various types of data
sets, such as player profiles or weapon profiles, you don't have to create
specific storage implementation for each data set when using this library. You
just need to define types and create objects.

If you have many data sets, a "hard coded" manual solution for each set will
result in somewhat repeated code.

If you also have validation constraints, that code will be repeated too.

This library will help you with everything from reading keyvalue files to
storage and validation. You just need to declare types and validation
constraints and the library will enforce it.


WHAT IT DOESN'T DO
------------------

* Memory management
  You'll have to make sure objects and types are deleted when no longer in use.
  Otherwise there will be memory leaks. Read the API documentation carefully
  to see which functions that return resources that must be released again.
  (Hint: Cloning or creating objects and types, parser context object)

* It's not a tree structure
  Regular KeyValue files use a tree structure. This object manager use a plain
  associative array structure where each object has keys mapped to values.

  However, a tree structure is indirectly supported by linking object references
  together. Objects can store references to other objects. It has its own object
  data type so that the compiler can do tag checking on object references as
  well.


RESOURCE USAGE
--------------

* Small processing overhead
  The main goal isn't a super efficient object manager, but efficient enough.
  Because of type checking and validation there is a small overhead when
  modifying data. These checks are basically comparisons of primitive values and
  shouldn't be an issue with normal usage.

  If you have code that's _very_ busy you should consider using buffers or
  caches in front of the data storage. Use the SourceMod profiler to measure if
  this really is an issue in your code - before optimizing.

* Memory overhead
  Since it's a dynamic storage manager, objects need to store meta data and will
  use a little bit more memory than a static hard coded solution would. But it's
  also a lot more flexible solution.

  However, immutable objects are more memory efficient than mutable objects,
  since immutable objects share their type descriptor between objects of the
  same type. Mutable objects have their own private type descriptor.
  
  Use immutable objects when you can to reduce memory overhead, especially on
  object types that aren't modified after creation.
  
  The memory overhead also depends on how much space you reserve for each value
  entry. Memory will be wasted if you reserve more space than the longest value
  requires.
  
  An object with 4 strings of 256 byte will require about 2 KB, including the
  object array itself, list of null keys and a type descriptor reference.
  
  The type descriptor for this object use 8-9 KB where the trie (key name index)
  use 8 KB alone (probably a canditate for the SourceMod team to optimize).

* A little memory and CPU overhead is a trade off for writing more code
  yourself. It can still be efficient if used correctly.


How to Create and Use Objects
=============================

Also see the complete example in ImmutableObjectExample in objectlibtest.sp.


DECLARING TYPES
---------------

Types are a composite of key names and their data types, which is stored in a
type descriptor.

Create a type descriptor by using the ObjLib_CreateType function. Then use
ObjLib_AddKey to add keys to the type:

    // Declare a "person" type.
    new ObjectType:personType = ObjLib_CreateType();
    ObjLib_AddKey(personType, "name", ObjDataType_String);
    ObjLib_AddKey(personType, "skillPoints", ObjDataType_Cell);
    ObjLib_AddKey(personType, "bestFriend", ObjDataType_Object);

This type descriptor can be used as a template to create "person" objects.
Immutable objects will use this type descriptor directly, while mutable objects
will clone and use a private one.

When you create an immutable object with this type, the type descriptor will be
locked. You can still create more objects based on it, but keys cannot be added
or removed unless you create mutable objects or clone the type into a separate
unlocked type.


CREATING OBJECTS
----------------

There are two types of objects: Mutable and immutable. Mutable objects allow you
to add or remove keys after they were created, while immutable objects only
allow the data in existing keys to be modified.

The most optimal solution is to use immutable objects when you can, to reduce
memory overhead.

Create objects using the ObjLib_CreateObject function and specify which type of
object you're creating. Default is an immutable object, but this can be
overridden with the mutableObject parameter.

    // Create immutable person objects.
    new Object:alice = ObjLib_CreateObject(personType);
    new Object:bob = ObjLib_CreateObject(personType);

Now there's two person objects with the keys described in the person type
descriptor. Simply use the set functions to initialize object data.

    // Setting values.
    ObjLib_SetString(alice, "name", "Alice");
    ObjLib_SetCell(alice, "skillPoints", 100);
    ObjLib_SetObject(alice, "bestFriend", bob);
    
    // Retrieving values.
    new skillPoints = ObjLib_GetCell(alice, "skillPoints");

Note the use of functions that match the data type for each key. If there's a
mismatch the compiler will probably first warn about a tag mismatch, and if not,
the object library will detect a type mismatch at runtime and throw an error.
This pattern is chosen to enforce type safety as far as SourcePawn can do.

There are also functions for refering keys by index instead of names (like
ObjLib_SetCellAt) so that it's possible to do optimizations in busy code such as
loops. You can retreive key indexes by using ObjLib_GetKeyIndex and cache them.
The object library is using ADT tries to map key names to indexes for fast
lookup, so using key names will be fine in most cases.


CLONING TYPES AND OBJECTS
-------------------------

When a type is used to create an immutable objects, it's locked. But it can be
cloned to a separate type so you can continue modifying it.

Cloning objects need special treatment about the type descriptor (which is
handled internally by the object library). It's important to know about this so
that memory management can be done properly. There's one special case.


AVOID MEMORY LEAK WHEN CLONING FROM MUTABLE TO IMMUTABLE OBJECT

Cloning a mutable object into an immutable object will create a clone of the
type descriptor. The cloned object is using it, but the cloned type is not
attached to anything since it's locked and can be shared between multiple
objects.

Delete this cloned type when it's no longer in use by any object. It can be
retrieved from the cloned object by using ObjLib_GetTypeDescriptor. If you
delete the cloned immutable object without deleting the cloned type, there will
be a memory leak.

Example with leak:

    new Object:mutableObject = ...      // some mutable object.
    new Object:immutableObject = ObjLib_CloneObject(mutableObject, false);
    
    ObjLib_DeleteObject(immutableObject);
    
    // INVISIBLE LEAK!
    // There was a type descriptor cloned behind the scenes and we've lost the
    // reference to it.

How to properly handle this:

    new Object:mutableObject = ...      // some mutable object.
    new Object:immutableObject = ObjLib_CloneObject(mutableObject, false);
    
    new ObjectType:typeFromImmutableObject = ObjLib_GetTypeDescriptor(immutableObject);
    ObjLib_DeleteObject(immutableObject);
    ObjLib_DeleteObjectType(typeFromImmutableObject);   // Deleting hidden cloned type.


ERROR HANDLERS
--------------

Type descriptors may store a custom error handler for handling recoverable
errors. Unrecoverable errors are always handled by this library, such as
invalid object references. Recoverable errors are invalid key names, type
mismatch and constraint violations.

The error handler use the ObjLib_ErrorHandler callback prototype, and you may
attatch error handler callbacks to type descriptors you create.

It's also possible to override an error handler in data accessor functions such
as ObjLib_SetCell. Then you can use a different error handler in special cases.

Possible future improvements:
Custom error handler for individual keys or constraints. Need to consider
whether this is actually useful and how to implement this.


VALIDATION
----------

Validation can be applied to keys by assigning a constraint object to it when
adding keys. These objects can be created by using the constraint object
builders. The following builders are available:

    * ObjLib_GetCellConstraints
    * ObjLib_GetFloatConstraints
    * ObjLib_GetHandleConstraints
    * ObjLib_GetFunctionConstraints
    * ObjLib_GetStringConstraints
    * ObjLib_GetArrayConstraints
    * ObjLib_GetObjectConstraints
    * ObjLib_GetObjTypeConstraints
    * ObjLib_GetCustomConstraints   - Can be used with any data type.

The constraint object used must match the data type of the key.

A custom constraint object may be used to let the user decide which values that
are valid. It contains a reference to a ObjLib_KeyValidator callback.

If a value violated a constraint the error handler will trigger a constraint
violation error where the user is able to handle it. The value is rejected.


DELETING CONSTRAINT OBJECTS

Constraint objects should only be deleted manually if it's not used anywhere.
When attached to keys, the type descriptor will delete constraint objects when
it's deleted itself.


EXAMPLE USAGE

    // Declare a "person" type.
    new ObjectType:personType = ObjLib_CreateType();
    
    // Get name constraints. We only set "nonempty" in this example to prevent
    // empty strings. The builder has a lot of other optinal parameters too.
    new Object:nameConstraints = ObjLib_GetStringConstraints(true);
    
    // Get skill constraints. Block negative values.
    new Object:skillConstraints = ObjLib_GetCellConstraints(
            false,          // nonzero
            true,           // lowerLimit
            false,          // upperLimit
            0);             // min
    
    // Get friend constraints. Only allow personType objects.
    new Object:friendConstraints = ObjLib_GetObjectConstraints(
            false,          // nonzero
            personType);    // type
    
    // Add keys to person type and assign constraint objects.
    ObjLib_AddKey(personType, "name", ObjDataType_String, nameConstraints);
    ObjLib_AddKey(personType, "skillPoints", ObjDataType_Cell, skillConstraints);
    ObjLib_AddKey(personType, "bestFriend", ObjDataType_Object, friendConstraints);
    
    // Trying to set skillPoints to -1 will trigger a constraint violation
    // error.
    ObjLib_SetCell(somePersonObject, "skillPoints", -1);


DIFFERENCE BETWEEN OBJECT CONSTRAINTS AND OBJECT TYPE CONSTRAINTS

An object constraint may require the object to be a certain type (use a certain
type descriptor). This is a strict constraint and implies any sub constraints
in the type it's bound to.

Object type constraints may just require certain keys to exist instead of
requiring the entire object to be a certain type. As the name describes,
"object type constraint", it's only putting constraints on the type itself, not
the whole object, and is less strict. As long as the object has the required
keys, it's valid.


MEMORY MANAGEMENT
-----------------

When objects or types are no longer used they must be deleted, or there will be
memory leaks.

    ObjLib_DeleteObject(alice);
    ObjLib_DeleteObject(bob);
    ObjLib_DeleteType(personType);

These functions will by default also reset the references to INVALID_OBJECT or
INVALID_OBJECT_TYPE.

Make sure that you don't delete a type that's still used by other objects. If
those objects try to access their type descriptor there will be an unrecoverable
error.

Mutable objects that have their own private type descriptors will delete them
itself. Trying to delete their type descriptor will trigger an error because
they're attatched to an object.


REFLECTION
----------

Since everything is declared at run time, it's also possible to inspect object
meta data. Here's an example that will get the list of keys and their data
types:

    // Reflection. List data types for each key in personType.
    new Handle:keys = ObjLib_GetTypeKeys(personType);
    new Handle:dataTypes = ObjLib_GetTypeDataTypes(personType);
    new len = GetArraySize(keys);
    
    PrintToServer("Keys in personType");
    for (new i = 0; i < len; i ++)
    {
        // Get key name.
        GetArrayString(keys, i, buffer, sizeof(buffer));
        
        // Get data type string.
        ObjLib_DataTypeToString(ObjectDataType:GetArrayCell(dataTypes, i), buffer2, sizeof(buffer2));
        
        PrintToServer("%s: %s", buffer, buffer2);
    }


KEYVALUE PARSER
---------------

The KeyValue parser may be used to parse elements in a KeyValue tree and store
them in objects. It's recursive and will parse all sub sections recursively, but
it doesn't have to start at the root section.

The intented usage is to predefine type descriptors that is matching the
KeyValue tree and parse it. The object library will handle validation if any
constraints are defined. This will save a lot of work instead of manually
implementing a parser, validation and data storage. All is handled by this
object library.

Due to limits in objects it will not be able to store sections and keys with
duplicate names. Only the first ones will be stored. We have arrays for that,
but it's not handled by this library at the moment.


PARSER CONTEXT OBJECT

The parser depends on a context object to store settings and states. The
following settings can be configured by the user:

  * rootType
    Optional type decriptor to use for validation. If none the parser will store
    values as strings in mutable objects. Nested types for sub sections will be
    handled recursively, so it's possible to pass a complete type hierarchy as
    root type.
  * ignoreEmptySections
    Flag for ignoring (skipping) empty sections when parsing. If the empty
    section has constraints it will still be ignored. The object reference in
    the parent will stay at null instead.
  * booleanType
    What type of boolean words to accept when converting strings to boolean
    values.
  * continueOnError
    Flag for continuing parsing remaining elements if there's a validation
    error. Sometimes we still need the other elements in the KeyValue tree and
    skip the invalid elements. A validation error will still be logged.
  * errorHandler
    Optional general error handler callback to use so that the user can handle
    parse and validation errors. When this error handler is available, errors
    will not be logged, but passed to the handler instead.

The context object must be deleted by the user when parsing is done and it's no
longer needed.


EXAMPLE USAGE

    // Load and prepare a keyvalues file.
    newHandle:kv = CreateKeyValues("Root");
    FileToKeyValues(kv, "objectlibtest-kvfull.txt");    // Must be located in root of game directory.
    KvRewind(kv);
    
    // Declare types.
    
    // DataType section. Some keys have constraints.
    new ObjectType:dataTypes = ObjLib_CreateType(16);
    ObjLib_AddKey(dataTypes, "cell", ObjDataType_Cell, ObjLib_GetCellConstraints(true, true, true, 5, 15));
    ObjLib_AddKey(dataTypes, "bool", ObjDataType_Bool);
    ObjLib_AddKey(dataTypes, "float", ObjDataType_Float, ObjLib_GetFloatConstraints(true, true, true, 1.0, 5.0));
    ObjLib_AddKey(dataTypes, "string", ObjDataType_String);
    
    // Root section. NestedSections doesn't use any object constraints so that
    // the parser will add objects and keys automatically (strings).
    new ObjectType:rootType = ObjLib_CreateType();
    ObjLib_AddKey(rootType, "DataTypes", ObjDataType_Object, ObjLib_GetObjectConstraints(true, dataTypes));
    ObjLib_AddKey(rootType, "NestedSections", ObjDataType_Object);
    
    // Get a parser context. This object stores parser state and settings. Most
    // default settings will do fine in this example, but it's recommended to
    // give it a name so it can be identified in error logs.
    new Object:parseContext = ObjLib_GetParseContext("objectlibtest", rootType);
    
    // Run parser. Parsed sections are added to a list.
    new Handle:list = ObjLib_ParseInListMode(kv, parseContext);
    
    // All sections (except empty) in the KeyValue file is now parsed,
    // validated and stored in objects. The objects for the root sections are
    // added to the list. Sub sections are referenced through keys in objects.
    
    // Parser context object must be deleted when no longer in use, otherwise
    // there might be a memory leak.
    ObjLib_DeleteParseContext(parseContext);

With just 14 lines this example declare types and constraints for a KeyValue
tree and parse it. The rest is handled by the object library.


TODO/NOTES

* Define a constraint format for declaring types through KeyValue files. That
  way we don't need to hard code most constraints. This is a quite complex task
  to implement and low priority.
* Add support for named object lookup. If a key in a tree is declared as an
  object in the type hierarchy, the parser could automatically try look up an
  object with the value's name through a user defined lookup function. If the
  object is found it would insert it instead of the value itself. This might
  need to be done in a post validation process when the tree is parsed.
* Automatically store duplicate keys and sections in arrays. Objects only allow
  unique names, but arrays fixes this.
* Sometimes data cannot be validated until all keys are parsed. Provide a
  callback for doing post object validation once a section is parsed (not the
  same as OnSectionEnd, but a user callback). Perhaps a callback in the context
  object for post validation of specific keys (so it will skip keys already
  known to be valid).
  (How to handle nested sections?)


COMMON MISTAKES
---------------

TYPE MISMATCH
Copy-paste mistake when registering a key that's supposed to be for instance
float but created as cell. When you later use ObjLib_SetFloat on that key it
will throw a key type mismatch error.

Check that keys are registered with the intended data types, and that every line
that access those keys use the correct accessors.

INVALID HANDLE ERROR WHEN DELETING OBJECT
If the stack trace is:
[0] ObjLib_GetTypeParentObject()
[1] ObjLib_DeleteObject()
[2] ...

This means that it's trying to access a type descriptor that no longer exist.
It's a common mistake to delete the type before objects. It will cause this
error.

Always delete objects first, then delete type descriptors.
